// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace APITesting.Feature
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("APITests")]
    public partial class APITestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SearchApi.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "APITests", "\tIn order to search \r\n\tAs a API Consumer\r\n\tI want the API to send me proper failu" +
                    "re response codes\r\n\tso that I can handle them and show appropriate error pages t" +
                    "o user", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SearchAPICalledWithParameters(string testCase, string store, string lang, string currency, string query, string offset, string limit, string status, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "searchNormal"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search API called with parameters", @__tags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given(string.Format("I call Search API with parameters {0}, \'{1}\', \'{2}\', \'{3}\', {4}, {5}", store, lang, currency, query, offset, limit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.When("I get the response back from API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then(string.Format("Search API returns \'{0}\'", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search API called with parameters: MissingCurrency")]
        [NUnit.Framework.CategoryAttribute("searchNormal")]
        public virtual void SearchAPICalledWithParameters_MissingCurrency()
        {
            this.SearchAPICalledWithParameters("MissingCurrency", "1", "en", "", "red", "0", "2", "ERROR_MISSINGCURRENCY", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search API called with parameters: MissingLanguage")]
        [NUnit.Framework.CategoryAttribute("searchNormal")]
        public virtual void SearchAPICalledWithParameters_MissingLanguage()
        {
            this.SearchAPICalledWithParameters("MissingLanguage", "2", "", "GBP", "green", "0", "10", "ERROR_MISSINGLANGUAGE", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search API called with parameters: MissingQuery")]
        [NUnit.Framework.CategoryAttribute("searchNormal")]
        public virtual void SearchAPICalledWithParameters_MissingQuery()
        {
            this.SearchAPICalledWithParameters("MissingQuery", "1", "en", "EUR", "", "0", "2", "ERROR_MISSINGQUERY", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search API called with parameters: MissingStore")]
        [NUnit.Framework.CategoryAttribute("searchNormal")]
        public virtual void SearchAPICalledWithParameters_MissingStore()
        {
            this.SearchAPICalledWithParameters("MissingStore", "0", "en", "GBP", "red", "0", "2", "ERROR_MISSINGSTORE", ((string[])(null)));
#line hidden
        }
        
        public virtual void SearchAPICalledWithDifferentRequestTypes(string testCase, string requestType, string failureresponsecode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "searchFail"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search API called with different request types", @__tags);
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given(string.Format("I make a \'{0}\' call to Search API without parameters", requestType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.When("I get the response back from API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then(string.Format("API returns {0}", failureresponsecode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search API called with different request types: TypeGet")]
        [NUnit.Framework.CategoryAttribute("searchFail")]
        public virtual void SearchAPICalledWithDifferentRequestTypes_TypeGet()
        {
            this.SearchAPICalledWithDifferentRequestTypes("TypeGet", "GET", "400", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search API called with different request types: TypePost")]
        [NUnit.Framework.CategoryAttribute("searchFail")]
        public virtual void SearchAPICalledWithDifferentRequestTypes_TypePost()
        {
            this.SearchAPICalledWithDifferentRequestTypes("TypePost", "POST", "403", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search API called with different request types: TypeGetWrongURL")]
        [NUnit.Framework.CategoryAttribute("searchFail")]
        public virtual void SearchAPICalledWithDifferentRequestTypes_TypeGetWrongURL()
        {
            this.SearchAPICalledWithDifferentRequestTypes("TypeGetWrongURL", "GETWITHWRONGURL", "404", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search API called with different request types: TypeHead")]
        [NUnit.Framework.CategoryAttribute("searchFail")]
        public virtual void SearchAPICalledWithDifferentRequestTypes_TypeHead()
        {
            this.SearchAPICalledWithDifferentRequestTypes("TypeHead", "HEAD", "405", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search API called with different request types: TypePut")]
        [NUnit.Framework.CategoryAttribute("searchFail")]
        public virtual void SearchAPICalledWithDifferentRequestTypes_TypePut()
        {
            this.SearchAPICalledWithDifferentRequestTypes("TypePut", "PUT", "501", ((string[])(null)));
#line hidden
        }
        
        public virtual void SearchAPICalledWithParametersAndMatchTheCountAsPerTheParameters(string testCase, string store, string lang, string currency, string query, string offset, string limit, string count, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "additionalSearchTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search API called with parameters and match the count as per the parameters", @__tags);
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given(string.Format("I call Search API with parameters {0}, \'{1}\', \'{2}\', \'{3}\', {4}, {5}", store, lang, currency, query, offset, limit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
 testRunner.When("I get the response back from API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then(string.Format("Search API returns product {0}", count), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search API called with parameters and match the count as per the parameters: With" +
            "outLimitParam")]
        [NUnit.Framework.CategoryAttribute("additionalSearchTest")]
        public virtual void SearchAPICalledWithParametersAndMatchTheCountAsPerTheParameters_WithoutLimitParam()
        {
            this.SearchAPICalledWithParametersAndMatchTheCountAsPerTheParameters("WithoutLimitParam", "1", "en", "GBP", "red", "0", "0", "250", ((string[])(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search API called with parameters and match the count as per the parameters: With" +
            "LimitParam")]
        [NUnit.Framework.CategoryAttribute("additionalSearchTest")]
        public virtual void SearchAPICalledWithParametersAndMatchTheCountAsPerTheParameters_WithLimitParam()
        {
            this.SearchAPICalledWithParametersAndMatchTheCountAsPerTheParameters("WithLimitParam", "1", "en", "GBP", "red", "0", "10", "10", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
